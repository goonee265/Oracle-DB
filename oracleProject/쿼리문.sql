--1.실시간 차트(TOP100)
SELECT SUB1.RANK AS 순위,        
       CASE
        WHEN SUB1.RANK>SUB2.RANK THEN '▽'||TO_CHAR(SUB1.RANK-SUB2.RANK)
        WHEN SUB1.RANK<SUB2.RANK THEN '▲'||TO_CHAR(SUB2.RANK-SUB1.RANK)
        WHEN SUB1.RANK=SUB2.RANK THEN '-'
        ELSE '진입'
      END AS 변동,
      SUB1.TITLE AS 제목, SUB1.S_NAME AS 가수명, SUB1.A_NAME AS 앨범명, SUB1.GENRE AS 장르
FROM (SELECT  ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK, 
              M.TITLE, S.S_NAME, A.A_NAME, M.GENRE, M.M_CODE
      FROM SALES SAL, MUSIC M, SINGER S, ALBUM A
      WHERE SAL.M_CODE=M.M_CODE AND
            M.S_CODE=S.S_CODE AND
            M.A_CODE=A.A_CODE AND
            BUY_DATE<=SYSDATE
      GROUP BY M.TITLE, S.S_NAME, A.A_NAME, M.GENRE, M.M_CODE) SUB1,
     (SELECT  ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK, 
              M.M_CODE
              FROM SALES SAL, MUSIC M, SINGER S, ALBUM A
      WHERE SAL.M_CODE=M.M_CODE AND
            M.S_CODE=S.S_CODE AND
            M.A_CODE=A.A_CODE AND
            BUY_DATE<=SYSDATE-1
      GROUP BY M.M_CODE) SUB2
WHERE SUB1.M_CODE=SUB2.M_CODE AND SUB1.RANK<=100;

--2.장르별 인기 순위(TOP10)
SELECT P.TITLE AS "POP", D.TITLE AS "댄스", B.TITLE AS "발라드", M.TITLE AS "록/메탈", R.TITLE AS "랩/힙합", 
       T.TITLE AS "트로트", S.TITLE AS "RnB/Soul", I.TITLE AS "인디음악" 
FROM    (SELECT TITLE, RANK
         FROM (SELECT ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS RANK, M.TITLE AS TITLE
                FROM MUSIC M, SALES S
                WHERE M.M_CODE=S.M_CODE AND M.GENRE='POP'
                 GROUP BY  M.TITLE
                ORDER BY  ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC)
                )
        WHERE RANK<=10) P,
        (SELECT TITLE, RANK
         FROM (SELECT ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS RANK, M.TITLE AS TITLE
                FROM MUSIC M, SALES S
                WHERE M.M_CODE=S.M_CODE AND M.GENRE='트로트'
                GROUP BY  M.TITLE
                ORDER BY  ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC)
              )
        WHERE RANK<=10) T,
        (SELECT TITLE, RANK
        FROM (SELECT ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS RANK, M.TITLE AS TITLE
             FROM MUSIC M, SALES S
            WHERE M.M_CODE=S.M_CODE AND M.GENRE='랩/힙합'
             GROUP BY  M.TITLE
            ORDER BY  ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC)
              )
        WHERE RANK<=10) R,
        (SELECT TITLE, RANK
        FROM (SELECT ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS RANK, M.TITLE AS TITLE
                FROM MUSIC M, SALES S
                WHERE M.M_CODE=S.M_CODE AND M.GENRE='록/메탈'
                GROUP BY  M.TITLE
                ORDER BY  ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC)
                )
        WHERE RANK<=10) M,
        (SELECT TITLE, RANK
        FROM (SELECT ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS RANK, M.TITLE AS TITLE
              FROM MUSIC M, SALES S
             WHERE M.M_CODE=S.M_CODE AND M.GENRE='댄스'
             GROUP BY  M.TITLE
            ORDER BY  ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC)
            )
        WHERE RANK<=10) D,
        (SELECT TITLE, RANK
        FROM (SELECT ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS RANK, M.TITLE AS TITLE
             FROM MUSIC M, SALES S
            WHERE M.M_CODE=S.M_CODE AND M.GENRE='발라드'
            GROUP BY  M.TITLE
            ORDER BY  ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC)
            )
        WHERE RANK<=10) B,
        (SELECT TITLE, RANK
        FROM (SELECT ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS RANK, M.TITLE AS TITLE
              FROM MUSIC M, SALES S
             WHERE M.M_CODE=S.M_CODE AND M.GENRE='인디음악'
            GROUP BY  M.TITLE
            ORDER BY  ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC)
             )
        WHERE RANK<=10) I,
        (SELECT TITLE, RANK
        FROM (SELECT ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS RANK, M.TITLE AS TITLE
             FROM MUSIC M, SALES S
             WHERE M.M_CODE=S.M_CODE AND M.GENRE='RnB/Soul'
              GROUP BY  M.TITLE
             ORDER BY  ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC)
             )
        WHERE RANK<=10) S
WHERE P.RANK=D.RANK(+) AND
      D.RANK=B.RANK(+) AND
      B.RANK=M.RANK(+) AND
      M.RANK=R.RANK(+) AND
      R.RANK=T.RANK(+) AND
      T.RANK=S.RANK(+) AND
      S.RANK=I.RANK(+); 

--3.세대별 인기 노래 순위(TOP10)
SELECT SUB10.TITLE AS "10대", SUB20.TITLE AS "20대", SUB30.TITLE AS "30대", SUB40.TITLE AS "40대", SUB50.TITLE AS "50대"
FROM (SELECT TITLE, RANK
      FROM (SELECT MS.M_CODE, MS.TITLE||'('||SG.S_NAME||')' AS TITLE, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM SALES S, MUSIC MS, MEMBER M, SINGER SG
            WHERE M.MEM_CODE IN(SELECT MEM_CODE FROM SALES WHERE MEM_CODE IN (SELECT MEM_CODE FROM MEMBER WHERE TRUNC(SYSDATE-TO_DATE(SUBSTR(JUMIN,1,6),'RR/MM/DD'))/365<20))
                  AND S.MEM_CODE = M.MEM_CODE
                  AND MS.M_CODE = S.M_CODE
                  AND MS.S_CODE=SG.S_CODE
            GROUP BY MS.TITLE||'('||SG.S_NAME||')', MS.M_CODE)
      WHERE RANK<=10) SUB10,
     (SELECT TITLE, RANK
      FROM (SELECT MS.M_CODE, MS.M_CODE, MS.TITLE||'('||SG.S_NAME||')' AS TITLE, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM SALES S, MUSIC MS, MEMBER M, SINGER SG
            WHERE M.MEM_CODE IN(SELECT MEM_CODE FROM SALES WHERE MEM_CODE IN (SELECT MEM_CODE FROM MEMBER WHERE TRUNC(SYSDATE-TO_DATE(SUBSTR(JUMIN,1,6),'RR/MM/DD'))/365 BETWEEN 20 AND 29))
                  AND S.MEM_CODE = M.MEM_CODE
                  AND MS.M_CODE = S.M_CODE
                  AND MS.S_CODE=SG.S_CODE
            GROUP BY MS.TITLE||'('||SG.S_NAME||')', MS.M_CODE)
      WHERE RANK<=10) SUB20,
     (SELECT TITLE, RANK
      FROM (SELECT MS.M_CODE, MS.M_CODE, MS.TITLE||'('||SG.S_NAME||')' AS TITLE, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM SALES S, MUSIC MS, MEMBER M, SINGER SG
            WHERE M.MEM_CODE IN(SELECT MEM_CODE FROM SALES WHERE MEM_CODE IN (SELECT MEM_CODE FROM MEMBER WHERE TRUNC(SYSDATE-TO_DATE(SUBSTR(JUMIN,1,6),'RR/MM/DD'))/365 BETWEEN 30 AND 39))
                  AND S.MEM_CODE = M.MEM_CODE
                  AND MS.M_CODE = S.M_CODE
                  AND MS.S_CODE=SG.S_CODE
            GROUP BY MS.TITLE||'('||SG.S_NAME||')', MS.M_CODE)
      WHERE RANK<=10) SUB30,
     (SELECT TITLE, RANK
      FROM (SELECT MS.M_CODE, MS.M_CODE, MS.TITLE||'('||SG.S_NAME||')' AS TITLE, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM SALES S, MUSIC MS, MEMBER M, SINGER SG
            WHERE M.MEM_CODE IN(SELECT MEM_CODE FROM SALES WHERE MEM_CODE IN (SELECT MEM_CODE FROM MEMBER WHERE TRUNC(SYSDATE-TO_DATE(SUBSTR(JUMIN,1,6),'RR/MM/DD'))/365 BETWEEN 40 AND 49))
                  AND S.MEM_CODE = M.MEM_CODE
                  AND MS.M_CODE = S.M_CODE
                  AND MS.S_CODE=SG.S_CODE
            GROUP BY MS.TITLE||'('||SG.S_NAME||')', MS.M_CODE)
      WHERE RANK<=10) SUB40,
     (SELECT TITLE, RANK
      FROM (SELECT MS.M_CODE, MS.M_CODE, MS.TITLE||'('||SG.S_NAME||')' AS TITLE, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM SALES S, MUSIC MS, MEMBER M, SINGER SG
            WHERE M.MEM_CODE IN(SELECT MEM_CODE FROM SALES WHERE MEM_CODE IN (SELECT MEM_CODE FROM MEMBER WHERE TRUNC(SYSDATE-TO_DATE(SUBSTR(JUMIN,1,6),'RR/MM/DD'))/365>49))
                  AND S.MEM_CODE = M.MEM_CODE
                  AND MS.M_CODE = S.M_CODE
                  AND MS.S_CODE=SG.S_CODE
            GROUP BY MS.TITLE||'('||SG.S_NAME||')', MS.M_CODE)
      WHERE RANK<=10) SUB50
WHERE SUB10.RANK=SUB20.RANK AND
      SUB20.RANK=SUB30.RANK AND
      SUB30.RANK=SUB40.RANK AND
      SUB40.RANK=SUB50.RANK;

--4.세대별 인기가수(TOP5) 
SELECT SUB7080.S_NAME AS "7080년대", SUB1990.S_NAME AS "1990년대", SUB2000.S_NAME AS "2000년대", SUB2010.S_NAME AS "2010년대"
FROM (SELECT S_NAME, RANK
      FROM (SELECT SG.S_NAME, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM SALES S, MUSIC MS, SINGER SG
            WHERE S.M_CODE IN(SELECT M_CODE FROM MUSIC WHERE S_CODE IN (SELECT S_CODE FROM SINGER WHERE SUBSTR(DEBUT,1,4) >= 1970 AND SUBSTR(DEBUT,1,4) < 1990))
                  AND MS.S_CODE = SG.S_CODE 
                  AND MS.M_CODE = S.M_CODE
            GROUP BY SG.S_NAME)
            WHERE RANK<=5) SUB7080,
     (SELECT S_NAME, RANK
      FROM (SELECT SG.S_NAME, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM SALES S, MUSIC MS, SINGER SG
            WHERE S.M_CODE IN(SELECT M_CODE FROM MUSIC WHERE S_CODE IN (SELECT S_CODE FROM SINGER WHERE SUBSTR(DEBUT,1,4) >= 1990 AND SUBSTR(DEBUT,1,4) < 2000))
                  AND MS.S_CODE = SG.S_CODE 
                  AND MS.M_CODE = S.M_CODE
            GROUP BY SG.S_NAME)
            WHERE RANK<=5) SUB1990,
     (SELECT S_NAME, RANK
      FROM (SELECT SG.S_NAME, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM SALES S, MUSIC MS, SINGER SG
            WHERE S.M_CODE IN(SELECT M_CODE FROM MUSIC WHERE S_CODE IN (SELECT S_CODE FROM SINGER WHERE SUBSTR(DEBUT,1,4) >= 2000 AND SUBSTR(DEBUT,1,4) < 2010))
                  AND MS.S_CODE = SG.S_CODE 
                  AND MS.M_CODE = S.M_CODE
            GROUP BY SG.S_NAME)
            WHERE RANK<=5) SUB2000,
     (SELECT S_NAME, RANK
      FROM (SELECT SG.S_NAME, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM SALES S, MUSIC MS, SINGER SG
            WHERE S.M_CODE IN(SELECT M_CODE FROM MUSIC WHERE S_CODE IN (SELECT S_CODE FROM SINGER WHERE SUBSTR(DEBUT,1,4) >= 2010 AND SUBSTR(DEBUT,1,4) < 2020))
                  AND MS.S_CODE = SG.S_CODE 
                  AND MS.M_CODE = S.M_CODE
            GROUP BY SG.S_NAME)
            WHERE RANK<=5) SUB2010
WHERE SUB7080.RANK=SUB1990.RANK AND
      SUB1990.RANK=SUB2000.RANK AND
      SUB2000.RANK=SUB2010.RANK; 

--5.걸그룹 노래 순위 TOP30
SELECT S.RANK AS 순위, S.TITLE AS 제목, S.S_NAME AS 가수, A_NAME AS 앨범
FROM(SELECT ROW_NUMBER() OVER(ORDER BY COUNT(*)DESC) AS RANK, TITLE, S.S_NAME, A_NAME
      FROM SINGER S, MUSIC M, SALES SL, ALBUM A
      WHERE S.SEX = 'F'
      AND MEMBER_COUNT > 1
      AND A.A_CODE = M.A_CODE
      AND M.S_CODE = S.S_CODE
      AND SL.M_CODE = M.M_CODE
      GROUP BY S.S_NAME, M.TITLE, A_NAME) S
WHERE S.RANK <= 30;

--6.가장인기있는 앨범 TOP10(앨범에 속해있는 음악 다운로드횟수로 순위지정)
SELECT K.*
FROM (SELECT K.앨범명, SUM(K.다운로드) AS 다운로드
      FROM (SELECT M.TITLE, S.M_CODE, A.A_CODE, A.A_NAME AS 앨범명, COUNT(*) AS 다운로드
            FROM SALES S, MUSIC M, ALBUM A
            WHERE S.M_CODE = M.M_CODE AND M.A_CODE = A.A_CODE
            GROUP BY M.TITLE, S.M_CODE, A.A_CODE, A.A_NAME
            ORDER BY 5 DESC) K
      GROUP BY K.앨범명
      ORDER BY 2 DESC) K
WHERE ROWNUM <= 10;

--7.소속사별 가장 인기있는 가수를 보여주세요
SELECT LABELS AS 소속사, S_NAME AS 가수, CNT AS 다운로드
FROM (SELECT S1.LABELS, S1.S_NAME, COUNT(*) AS CNT, 
             ROW_NUMBER() OVER(PARTITION BY S1.LABELS ORDER BY COUNT(*) DESC) AS RANK
      FROM SINGER S1, MUSIC M, SALES S2
      WHERE S1.S_CODE = M.S_CODE AND M.M_CODE = S2.M_CODE
      GROUP BY S1.LABELS, S1.S_NAME)
WHERE RANK=1;

--8.국내 해외 비교
SELECT (SELECT COUNT(MS.GENRE)
        FROM SALES S, MUSIC MS
        WHERE GENRE = ANY (SELECT GENRE
                           FROM MUSIC
                           WHERE GENRE = 'POP')
        AND S.M_CODE= MS.M_CODE) 해외,
        
       (SELECT COUNT(MS.GENRE)
        FROM SALES S, MUSIC MS
        WHERE GENRE = ANY (SELECT GENRE
                           FROM MUSIC
                           WHERE GENRE != 'POP')
        AND S.M_CODE= MS.M_CODE) 국내
FROM DUAL;

--9.그룹별 제일 많은 노래가 팔린 그룹의 이름과 판매개수
SELECT Q.이름, Q.SEX AS "F/M/G", Q.음악판매수
FROM (SELECT S.S_NAME AS 이름, S.S_CODE, S.SEX AS SEX, SUM(Q) AS 음악판매수
      FROM (SELECT M_CODE, COUNT(*) AS Q
            FROM SALES 
            GROUP BY M_CODE
            ORDER BY COUNT(*) DESC) K,
            MUSIC M,
            SINGER S
      WHERE M.M_CODE = K.M_CODE AND M.S_CODE = S.S_CODE AND S.SEX = 'M'
      GROUP BY S.S_NAME, S.S_CODE, S.SEX
      ORDER BY 4 DESC) Q,
      SINGER S
WHERE ROWNUM = 1
UNION
SELECT Q.이름, Q.SEX AS "F/M/G", Q.음악판매수
FROM (SELECT S.S_NAME AS 이름, S.S_CODE, S.SEX AS SEX, SUM(Q) AS 음악판매수
      FROM (SELECT M_CODE, COUNT(*) AS Q
            FROM SALES 
            GROUP BY M_CODE
            ORDER BY COUNT(*) DESC) K,
            MUSIC M,
            SINGER S
      WHERE M.M_CODE = K.M_CODE AND M.S_CODE = S.S_CODE AND S.SEX = 'F'
      GROUP BY S.S_NAME, S.S_CODE, S.SEX
      ORDER BY 4 DESC) Q,
      SINGER S
WHERE ROWNUM = 1
UNION
SELECT Q.이름, Q.SEX AS "F/M/G", Q.음악판매수
FROM (SELECT S.S_NAME AS 이름, S.S_CODE, S.SEX AS SEX, SUM(Q) AS 음악판매수
      FROM (SELECT M_CODE, COUNT(*) AS Q
            FROM SALES 
            GROUP BY M_CODE
            ORDER BY COUNT(*) DESC) K,
            MUSIC M,
            SINGER S
      WHERE M.M_CODE = K.M_CODE AND M.S_CODE = S.S_CODE AND S.SEX = 'G'
      GROUP BY S.S_NAME, S.S_CODE, S.SEX
      ORDER BY 4 DESC) Q,
      SINGER S
WHERE ROWNUM = 1;

--10.연도별 매출 
SELECT TO_CHAR(S.BUY_DATE, 'YYYY')||'년' 연도, TO_CHAR(SUM(S.P_CODE*Q.PRICE),'999,999,999')||'원' 매출
FROM SALES S, SOUND_QUALITY Q
WHERE S.P_CODE=Q.P_CODE
GROUP BY TO_CHAR(S.BUY_DATE, 'YYYY')
ORDER BY 1;

--11.월별 매출
SELECT TO_CHAR(S.BUY_DATE, 'MM')||'월' 월, TO_CHAR(SUM(S.P_CODE*Q.PRICE),'999,999,999')||'원' 매출
FROM SALES S, SOUND_QUALITY Q
WHERE S.P_CODE=Q.P_CODE
GROUP BY TO_CHAR(S.BUY_DATE, 'MM')
ORDER BY 1;

--12.회원등급 및 포인트
SELECT MEM_NAME AS 이름, ID, NVL(G.RANK,'일반회원') AS 등급, SUB.POINT AS 포인트, CNT AS 다운로드
FROM (SELECT M.MEM_NAME, M.ID, SUM(Q.PRICE) AS SUM, SUM(Q.PRICE*0.1) AS POINT, COUNT(*) AS CNT
      FROM SALES SAL, MEMBER M, SOUND_QUALITY Q
      WHERE SAL.P_CODE=Q.P_CODE AND
      SAL.MEM_CODE=M.MEM_CODE
      GROUP BY M.MEM_NAME, ID) SUB, GRADE G
WHERE SUB.SUM BETWEEN G.LOAMT(+) AND G.HIAMT(+)
ORDER BY 4 DESC;      

--13.여성회원 별 다운로드 한 곡 순위
SELECT ROW_NUMBER() OVER(ORDER BY(COUNT(*))DESC) AS 순위, MS.TITLE AS 제목, S_NAME AS 가수, A_NAME AS 앨범명, GENRE AS 장르
FROM MEMBER M , SALES S, MUSIC MS, ALBUM A, SINGER SN
WHERE SUBSTR(JUMIN, 7, 1) IN (2, 3)
AND M.MEM_CODE = S.MEM_CODE
AND S.M_CODE = MS.M_CODE
AND A.A_CODE = MS.A_CODE
AND SN.S_CODE = MS.S_CODE
GROUP BY MS.TITLE, S_NAME, A_NAME, GENRE;

--14.00이가 좋아하는 음악 장르 ( 다운로드 )
----송도권이 좋아하는 장르 순위
SELECT RANK AS 순위, GENRE AS 장르
FROM (SELECT ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK, MS.GENRE, COUNT(*) 
      FROM MEMBER M , SALES S, MUSIC MS
      WHERE M.MEM_CODE = S.MEM_CODE
      AND S.M_CODE = MS.M_CODE
      AND MEM_NAME = '&NAME'
      GROUP BY MS.GENRE, MEM_NAME
      ORDER BY 3 DESC);

--15.00이가 좋아하는 아티스트의 노래 목록 (다운로드)
----송도권이 가장 좋아하는 아티스트의 노래 목록(소녀시대)
SELECT SG.S_NAME "가장 좋아하는 가수", MS.TITLE "노래 목록"     
FROM SINGER SG, MUSIC MS, MEMBER MB
WHERE SG.S_CODE = MS.S_CODE
AND (MB.MEM_NAME, S_NAME) IN (SELECT MEM_NAME, S_NAME
                           FROM(SELECT MEM_NAME, S_NAME, TITLE, ROW_NUMBER() OVER(ORDER BY SG1.S_CODE DESC) 순위 
                                FROM MEMBER M1, SALES S1, MUSIC MS1, SINGER SG1
                                WHERE M1.MEM_CODE = S1.MEM_CODE
                                AND S1.M_CODE = MS1.M_CODE
                                AND MS1.S_CODE = SG1.S_CODE
                                AND MEM_NAME = '&NAME')
                           WHERE 순위 = 1)
GROUP BY SG.S_NAME, MS.TITLE
ORDER BY 1;

--16.등급별 유저들이 가장 많이 구매한 음질순위
SELECT SUBDIA.음질||' : '||SUBDIA.다운로드 "DIAMOND", 
       SUBGOLD.음질||' : '||SUBGOLD.다운로드 "GOLD",
       SUBSIL.음질||' : '||SUBSIL.다운로드 "SIVER", 
       SUBBRO.음질||' : '||SUBBRO.다운로드 "BRONZE"
FROM (SELECT 음질, 다운로드, RANK
      FROM (SELECT Q2.QUALITY AS 음질, COUNT(*)||'건' AS 다운로드, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM (SELECT MEM_CODE
                  FROM (SELECT M.MEM_CODE, SUM(Q1.PRICE) AS SUM
                        FROM SALES SAL1, MEMBER M, SOUND_QUALITY Q1
                        WHERE SAL1.P_CODE=Q1.P_CODE AND
                        SAL1.MEM_CODE=M.MEM_CODE
                        GROUP BY M.MEM_CODE) SUB1, GRADE G
                  WHERE SUB1.SUM BETWEEN G.LOAMT(+) AND G.HIAMT(+)
                  AND G.RANK='DIAMOND') SUB2, SALES SAL2, SOUND_QUALITY Q2
            WHERE SUB2.MEM_CODE=SAL2.MEM_CODE AND
            SAL2.P_CODE=Q2.P_CODE
            GROUP BY Q2.QUALITY)) SUBDIA,
                
     (SELECT 음질, 다운로드, RANK
      FROM (SELECT Q2.QUALITY AS 음질, COUNT(*)||'건' AS 다운로드, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM (SELECT MEM_CODE
                  FROM (SELECT M.MEM_CODE, SUM(Q1.PRICE) AS SUM
                        FROM SALES SAL1, MEMBER M, SOUND_QUALITY Q1
                        WHERE SAL1.P_CODE=Q1.P_CODE AND
                        SAL1.MEM_CODE=M.MEM_CODE
                        GROUP BY M.MEM_CODE) SUB1, GRADE G
                WHERE SUB1.SUM BETWEEN G.LOAMT(+) AND G.HIAMT(+)
                AND G.RANK='GOLD') SUB2, SALES SAL2, SOUND_QUALITY Q2
            WHERE SUB2.MEM_CODE=SAL2.MEM_CODE AND
            SAL2.P_CODE=Q2.P_CODE
            GROUP BY Q2.QUALITY)) SUBGOLD,
      
    (SELECT 음질, 다운로드, RANK
      FROM (SELECT Q2.QUALITY AS 음질, COUNT(*)||'건' AS 다운로드, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM (SELECT MEM_CODE
                  FROM (SELECT M.MEM_CODE, SUM(Q1.PRICE) AS SUM
                        FROM SALES SAL1, MEMBER M, SOUND_QUALITY Q1
                        WHERE SAL1.P_CODE=Q1.P_CODE AND
                        SAL1.MEM_CODE=M.MEM_CODE
                        GROUP BY M.MEM_CODE) SUB1, GRADE G
                  WHERE SUB1.SUM BETWEEN G.LOAMT(+) AND G.HIAMT(+)
                  AND G.RANK='SILVER') SUB2, SALES SAL2, SOUND_QUALITY Q2
            WHERE SUB2.MEM_CODE=SAL2.MEM_CODE AND
            SAL2.P_CODE=Q2.P_CODE
            GROUP BY Q2.QUALITY)) SUBSIL,
      
     (SELECT 음질, 다운로드, RANK
      FROM (SELECT Q2.QUALITY AS 음질, COUNT(*)||'건' AS 다운로드, ROW_NUMBER() OVER(ORDER BY COUNT(*) DESC) AS RANK
            FROM (SELECT MEM_CODE
                  FROM (SELECT M.MEM_CODE, SUM(Q1.PRICE) AS SUM
                        FROM SALES SAL1, MEMBER M, SOUND_QUALITY Q1
                        WHERE SAL1.P_CODE=Q1.P_CODE AND
                        SAL1.MEM_CODE=M.MEM_CODE
                        GROUP BY M.MEM_CODE) SUB1, GRADE G
                WHERE SUB1.SUM BETWEEN G.LOAMT(+) AND G.HIAMT(+)
                AND G.RANK='BRONZE') SUB2, SALES SAL2, SOUND_QUALITY Q2
            WHERE SUB2.MEM_CODE=SAL2.MEM_CODE AND
            SAL2.P_CODE=Q2.P_CODE
            GROUP BY Q2.QUALITY)) SUBBRO
      
WHERE SUBDIA.RANK=SUBGOLD.RANK AND
      SUBGOLD.RANK=SUBSIL.RANK AND
      SUBSIL.RANK=SUBBRO.RANK;